box:
    id: mhart/alpine-node
    cmd: /bin/sh
build:
  steps:
    - script:
      name: install
      code: |
        ln -s /usr/share/emscripten ../emsdk-portable
        echo http://dl-cdn.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories && \
        echo http://dl-cdn.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories && \
        apk --update add yarn emscripten emscripten-libs-asmjs make cmake emscripten-libs-wasm binaryen git curl
    - script:
      name: opencvjs and opencv
      code: |
        git clone https://github.com/H-Plus-Time/opencv $HOME/opencv --depth=1 && cd $HOME/opencv && \
        mkdir -p build && cd build && ../wrapper.sh && emmake make
    - script:
      name: actual build
      code: |
        ln -s $HOME/opencv ./ && yarn && emcc -o ./web-yaed.js ./cpp/*.cpp -s EXPORTED_FUNCTIONS="['_detect']"   -std=c++11 -O3 --bind -s DEMANGLE_SUPPORT=1 -s WASM=1 -s MODULARIZE=1 -s EXPORT_NAME="'webYaed'" -s ASSERTIONS=2 -s ALLOW_MEMORY_GROWTH=1 ./opencv/build/lib/libopencv_imgproc.a ./opencv/build/lib/libopencv_core.a ./opencv/build/3rdparty/lib/libzlib.a
deploy:
  steps:
    - script:
      name: install curl
      code: apk --update add curl
    - script:
      name: get version
      code: export PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - script:
      name: generate tarball
      code: tar -czf build.tar.gz --exclude=opencv *
    - github-create-release:
      token: $GITHUB_TOKEN
      tag: $PACKAGE_VERSION
    - github-upload-asset:
      token: $GITHUB_TOKEN
      file: build.tgz
